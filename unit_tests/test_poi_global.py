# Generated by CodiumAI
import random
import unittest
from collections.abc import Sequence

import numpy as np

from TPTBox import POI, Ax_Codes, POI_Global
from TPTBox.core.poi_abstract import POI_Descriptor


def get_random_ax_code() -> Ax_Codes:
    directions = [["R", "L"], ["S", "I"], ["A", "P"]]
    idx = [0, 1, 2]
    random.shuffle(idx)
    return tuple(directions[i][random.randint(0, 1)] for i in idx)  # type: ignore


def get_poi(x: tuple[int, int, int] = (50, 30, 40), num_vert=3, num_subreg=3, rotation=True, min_subreg=1, max_subreg=255):
    out_points: dict[int, dict[int, Sequence[float]]] = {}

    for idx in range(num_vert):
        out_points[idx + 1] = {}
        for _ in range(num_subreg):
            point = tuple(random.randint(1, a * 100) / 100.0 for a in x)
            subregion = random.randint(min_subreg, max_subreg)
            out_points[idx + 1][subregion] = point
    origin = tuple(random.randint(1, 100) for _ in range(3))
    if rotation:
        from scipy.spatial.transform import Rotation

        m = 30
        r = Rotation.from_euler("xyz", (random.randint(-m, m), random.randint(-m, m), random.randint(-m, m)), degrees=True)
        r = np.round(r.as_matrix(), decimals=5)
    else:
        r = np.eye(3)
    return POI(out_points, orientation=("R", "A", "S"), zoom=(1, 1, 1), shape=x, origin=origin, rotation=r)


class TestPOI(unittest.TestCase):
    def test_glob_by_definition(self):
        poi = get_poi()
        poi.orientation = ("R", "A", "S")
        poi.zoom = (1, 1, 1)
        glob_poi = POI_Global(poi._get_centroids().copy())
        poi = poi.reorient(get_random_ax_code())
        poi.rescale_((3, 2, 1))
        glob_poi.to_other_poi(poi)

    def test_not_implemented(self):
        self.assertRaises(NotImplementedError, POI_Global, None)

    def test_is_global(self):
        poi = get_poi()
        poi.orientation = ("L", "A", "S")
        poi.zoom = (1, 1, 0.5)
        self.assertFalse(poi.is_global)
        glob_poi = POI_Global(poi._get_centroids().copy())
        self.assertTrue(glob_poi.is_global)

    def test_copy(self):
        poi = get_poi()
        glob_poi = POI_Global(poi)

        c = glob_poi.copy()
        self.assertEqual(c, glob_poi)
        c[1, 1] = (-5, -10, -100)
        self.assertNotEqual(c, glob_poi)

        c = glob_poi.copy()
        self.assertEqual(c.info, glob_poi.info)
        c.info["Meaning_of_live"] = 42
        self.assertNotEqual(c.info, glob_poi.info)

        c = glob_poi.copy()
        self.assertEqual(c.format, glob_poi.format)
        c.format = 10
        self.assertNotEqual(c.format, glob_poi.format)

        glob_poi.info["Question_of_the_meaning_of_live"] = "Unknown"
        glob_poi.format = 1
        self.assertEqual(c, glob_poi)
        glob_poi[3, 4] = (1, 2, 3)
        self.assertNotEqual(c, glob_poi)

        c = glob_poi.copy()
        self.assertEqual(c, glob_poi)
        c[1, 1] = (-5, -10, -100)
        self.assertNotEqual(c, glob_poi)

        c = glob_poi.copy()
        self.assertEqual(c.info, glob_poi.info)
        c.info["Meaning_of_live"] = 42
        self.assertNotEqual(c.info, glob_poi.info)

        c = glob_poi.copy()
        self.assertEqual(c.format, glob_poi.format)
        c.format = 10
        self.assertNotEqual(c.format, glob_poi.format)

        self.assertEqual(len(glob_poi.copy(centroids=POI_Descriptor())), 0)

    def test_subreg_labes(self):
        from TPTBox.core.vert_constants import vert_subreg_labels

        self.assertEqual(len(vert_subreg_labels()), 10)
