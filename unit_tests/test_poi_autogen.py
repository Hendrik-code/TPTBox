# Generated by CodiumAI
from __future__ import annotations

import os
import tempfile
import unittest
from pathlib import Path

import numpy as np

from TPTBox.core.poi import POI
from TPTBox.core.poi_fun.poi_global import POI_Global


class TestPOI(unittest.TestCase):
    # Test that an instance of the 'POI' class is created with the correct default values.
    def test_default_values(self):
        poi = POI()
        assert poi.orientation == ("R", "A", "S")
        assert poi.zoom == (1, 1, 1)
        assert poi.shape is None
        assert poi.format is None
        assert poi.info == {}
        assert poi.rotation is None
        assert poi.origin is None

    # Test that the 'zoom' attribute is properly set to a valid value.
    def test_set_zoom_attribute(self):
        zoom_value = (1.0, 1.0, 1.0)
        poi = POI(zoom=zoom_value)
        assert poi.zoom == zoom_value

    # Test that the 'clone' method creates a new instance of the 'POI' class with the specified arguments.
    def test_clone_with_valid_arguments(self):
        # Create an instance of the POI class
        poi = POI()

        # Set some initial values for the attributes
        poi.orientation = ("A", "P", "S")
        poi.zoom = (1.0, 1.0, 1.0)
        poi.shape = (100, 100, 100)
        poi.rotation = np.eye(3)
        poi.origin = (0, 0, 0)

        # Clone the instance with new values for the attributes
        cloned_poi = poi.clone(
            orientation=("R", "A", "S"), zoom=(2.0, 2.0, 2.0), shape=(200, 200, 200), rotation=np.eye(3), origin=(10, 10, 10)
        )

        # Check that the cloned instance has the new values for the attributes
        assert cloned_poi.orientation == ("R", "A", "S")
        assert cloned_poi.zoom == (2.0, 2.0, 2.0)
        assert cloned_poi.shape == (200, 200, 200)
        assert cloned_poi.rotation is not None
        assert np.array_equal(cloned_poi.rotation, np.eye(3))
        assert cloned_poi.origin == (10, 10, 10)

    # Test that the 'local_to_global' method returns the correct global coordinates when given valid local coordinates.
    def test_local_to_global_valid_coordinates(self):
        # Create a POI object
        poi = POI()

        # Set the necessary attributes for the 'local_to_global' method
        poi.zoom = (2, 2, 2)
        poi.rotation = np.eye(3)
        poi.origin = (0, 0, 0)

        # Define the local coordinates
        local_coords = (1, 1, 1)

        # Calculate the expected global coordinates
        expected_coords = (2, 2, 2)

        # Call the 'local_to_global' method
        global_coords = poi.local_to_global(local_coords)

        # Check if the returned global coordinates match the expected coordinates
        assert global_coords == expected_coords

    # Test that the 'affine' property returns the expected value when all required attributes are set.
    def test_affine_property(self):
        # Create a POI object with all required attributes set
        poi = POI()
        poi.zoom = (1.0, 1.0, 1.0)
        poi.rotation = np.eye(3)
        poi.origin = (0.0, 0.0, 0.0)
        poi.shape = (10, 10, 10)

        # Calculate the expected affine matrix
        expected_affine = np.eye(4)
        expected_affine[:3, :3] = np.eye(3)
        expected_affine[:3, 3] = (0.0, 0.0, 0.0)

        # Check that the 'affine' property returns the expected value
        assert np.array_equal(poi.affine, expected_affine)

    # Test that the 'POI' instance can be saved to a file.
    def test_save_poi(self):
        # Create a 'POI' instance
        poi = POI()

        # Set some attributes
        poi[5, 5] = (1, 2, 3)
        poi.zoom = (1.0, 1.0, 1.0)
        poi.shape = (100, 100, 100)
        poi.origin = (0.0, 0.0, 0.0)
        poi.rotation = np.eye(3)

        # Save the 'POI' instance to a file
        with tempfile.TemporaryDirectory() as temp_dir:
            f = Path(temp_dir, "poi.json")
            poi.save(f)
            # Check if the file exists
            assert f.exists()
            assert POI.load(f) == poi
            Path(f).unlink()

    # Test that the 'crop_centroids' method correctly crops the centroids based on the given origin shift.
    def test_crop_centroids_valid_origin_shift(self):
        # Create a POI object with some centroids
        poi = POI(zoom=(1, 1, 1))
        poi.centroids = {(1, 1): (10.5, 20.5, 30.5), (2, 1): (15.5, 25.5, 35.5), (1, 2): (12.5, 22.5, 32.5)}

        # Set the shape and origin attributes
        poi.shape = (50, 50, 50)
        poi.origin = (0, 0, 0)
        poi.rotation = np.eye(3)
        # Define the origin shift
        o_shift = (slice(10, 20), slice(10, 20), slice(10, 20))

        # Call the crop_centroids method
        cropped_poi = poi.apply_crop(o_shift)

        # Check that the centroids have been correctly cropped
        assert cropped_poi.centroids == {(1, 1): (0.5, 10.5, 20.5), (2, 1): (5.5, 15.5, 25.5), (1, 2): (2.5, 12.5, 22.5)}

        # Check that the shape and origin attributes have been updated
        assert cropped_poi.shape == (10, 10, 10)
        assert cropped_poi.origin == (10, 10, 10)

        # Check that the original POI object has not been modified
        assert poi.centroids == {(1, 1): (10.5, 20.5, 30.5), (2, 1): (15.5, 25.5, 35.5), (1, 2): (12.5, 22.5, 32.5)}
        assert poi.shape == (50, 50, 50)
        assert poi.origin == (0, 0, 0)

    # Test that the 'reorient' method correctly reorients the POI object when valid axcodes_to are provided.
    def test_reorient_with_valid_axcodes(self):
        # Create a POI object
        poi = POI()

        # Set the initial orientation
        poi.orientation = ("R", "A", "S")

        # Set the initial centroids
        poi.centroids = {(1, 1): (10.0, 20.0, 30.0), (2, 1): (15.0, 25.0, 35.0), (1, 2): (12.0, 22.0, 32.0)}

        # Set the initial zoom
        poi.zoom = (1.0, 1.0, 1.0)

        # Set the initial shape
        poi.shape = (100, 100, 100)

        # Set the initial rotation
        poi.rotation = np.eye(3)

        # Set the initial origin
        poi.origin = (0.0, 0.0, 0.0)

        # Set the axcodes_to for reorientation
        axcodes_to = ("L", "P", "I")

        # Call the reorient method
        poi.reorient_(axcodes_to)

        # Check if the orientation has been updated correctly
        assert poi.orientation == axcodes_to

        # Check if the centroids have been reoriented correctly
        assert poi.centroids == {
            (1, 1): (99 - 10.0, 99 - 20.0, 99 - 30.0),
            (2, 1): (99 - 15.0, 99 - 25.0, 99 - 35.0),
            (1, 2): (99 - 12.0, 99 - 22.0, 99 - 32.0),
        }, poi.centroids

        # Check if the zoom has been updated correctly
        assert poi.zoom == (1.0, 1.0, 1.0)

        # Check if the shape has been updated correctly
        assert poi.shape == (100, 100, 100)

        # Check if the rotation has been updated correctly
        assert np.array_equal(poi.rotation, -np.eye(3))

        # Check if the origin has been updated correctly
        assert poi.origin == (99.0, 99.0, 99.0), poi.origin

    # Test that the 'origin' attribute is properly set to a valid value in the POI class.
    def test_set_origin_valid_value(self):
        # Create a POI object
        poi = POI()

        # Set the 'origin' attribute to a valid value
        origin = (1.0, 2.0, 3.0)
        poi.origin = origin

        # Check that the 'origin' attribute is properly set
        assert poi.origin == origin

    # Test that the 'filter_points_inside_shape' method correctly filters out centroids that are outside the shape attribute of the POI object.
    def test_filter_points_inside_shape(self):
        # Create a POI object with centroids outside the shape
        poi = POI()
        poi.centroids = {(1, 1): (10, 10, 10), (2, 2): (20, 20, 20), (3, 3): (30, 30, 30)}
        poi.shape = (20, 20, 20)

        # Filter out centroids outside the shape
        filtered_poi = poi.filter_points_inside_shape()

        # Check that the filtered POI object only contains centroids inside the shape
        assert len(filtered_poi) == 1

        # Create a POI object with centroids inside the shape
        poi2 = POI()
        poi2.centroids = {(1, 1): (5, 5, 5), (2, 2): (15, 15, 15), (3, 3): (25, 25, 25)}
        poi2.shape = (20, 20, 20)

        # Filter out centroids outside the shape
        filtered_poi2 = poi2.filter_points_inside_shape()

        # Check that the filtered POI object contains all centroids inside the shape
        assert len(filtered_poi2.centroids) == 2

    # Test that the 'global_to_local' method returns the correct local coordinates when given valid global coordinates.
    def test_global_to_local_valid_coordinates(self):
        # Create a POI object
        poi = POI()

        # Set the necessary attributes for the affine transformation
        poi.zoom = (2, 2, 2)
        poi.rotation = np.eye(3)
        poi.origin = (0, 0, 0)

        # Define a global coordinate
        global_coord = (4, 4, 4)

        # Calculate the expected local coordinate
        expected_local_coord = (2, 2, 2)

        # Call the global_to_local method
        result = poi.global_to_local(global_coord)

        # Check if the result matches the expected local coordinate
        assert result == expected_local_coord, (result, expected_local_coord)

    # Test that the 'shift_all_centroid_coordinates' method correctly shifts all centroid coordinates by the given translation vector.
    def test_shift_all_centroid_coordinates_valid_translation(self):
        # Create a POI object with some centroid coordinates
        poi = POI()
        poi.centroids = {(5, 51): (1.0, 2.0, 3.0), (25, 12): (4.0, 5.0, 6.0)}

        # Define a translation vector
        translation_vector = (slice(2, None), slice(3, None), slice(4, None))

        # Call the shift_all_centroid_coordinates method
        result = poi.shift_all_coordinates(translation_vector)  # type: ignore

        # Check that the centroid coordinates have been correctly shifted
        assert result.centroids == {(5, 51): (-1.0, -1.0, -1.0), (25, 12): (2.0, 2.0, 2.0)}, result.centroids

    # Test that the 'map_labels' method correctly maps the labels in the POI object using a valid label_map.
    def test_map_labels_with_valid_label_map(self):
        # Create a POI object with some centroids
        poi = POI()
        poi.centroids = {(1, 1): (10, 10, 10), (2, 1): (20, 20, 20), (3, 2): (30, 30, 30)}

        # Define a valid label_map
        label_map = {(1, 1): (100, 100), (2, 1): (200, 200), (3, 2): (300, 300)}

        # Call the map_labels method with the valid label_map
        result = poi.map_labels(label_map)  # type: ignore

        # Check that the labels have been correctly mapped
        assert result.centroids == {(100, 100): (10, 10, 10), (200, 200): (20, 20, 20), (300, 300): (30, 30, 30)}

    def test_sorting_centroids_numeric(self):
        # Create a POI object with unsorted centroids
        unsorted_centroids = POI()
        unsorted_centroids.centroids = {
            (100, 1): (1.0, 2.0, 3.0),
            (20, 2): (4.0, 5.0, 6.0),
            (3, 100): (10.0, 11.0, 12.0),
            (3, 3): (7.0, 8.0, 9.0),
        }

        # Set the sorting_list attribute
        # Sort the centroids
        sorted_centroids = unsorted_centroids.sort()

        # Check that the centroids are sorted correctly
        assert list(sorted_centroids.keys()) == [(3, 3), (3, 100), (20, 2), (100, 1)], sorted_centroids

    # Test that the 'rescale' method properly rescales the centroid coordinates based on the given voxel spacing.
    def test_rescale_with_valid_voxel_spacing(self):
        # Create a POI object with some centroid coordinates
        poi = POI()
        poi.centroids = {(1, 1): (10.0, 20.0, 30.0), (2, 1): (15.0, 25.0, 35.0), (1, 2): (12.5, 22.5, 32.5)}

        # Set the shape attribute of the POI object
        poi.shape = (100, 100, 100)

        # Set the zoom attribute of the POI object
        poi.zoom = (1.0, 1.0, 1.0)

        # Call the rescale method with valid voxel spacing
        voxel_spacing = (0.5, 0.5, 0.5)
        rescaled_poi = poi.rescale(voxel_spacing=voxel_spacing)

        # Check that the centroid coordinates have been properly rescaled
        assert rescaled_poi.centroids == {
            (1, 1): (20.0, 40.0, 60.0),
            (2, 1): (30.0, 50.0, 70.0),
            (1, 2): (25.0, 45.0, 65.0),
        }, rescaled_poi.centroids

        # Check that the zoom attribute has been updated
        assert rescaled_poi.zoom == voxel_spacing

        # Check that the shape attribute remains the same
        assert rescaled_poi.shape == tuple(s * 2.0 for s in poi.shape), (rescaled_poi.shape, poi.shape)

    # Test that the remove_centroid method removes the specified centroid from the POI object.
    def test_remove_centroid(self):
        # Create a POI object with some centroids
        poi = POI()
        poi.centroids = {(5, 51): (1.0, 2.0, 3.0), (25, 12): (4.0, 5.0, 6.0)}

        # Remove a centroid using the remove_centroid method
        poi.remove_((5, 51))

        # Check that the centroid has been removed
        assert (5, 51) not in poi.centroids, poi
        assert len(poi.centroids) == 1
        assert (25, 12) in poi.centroids, poi

    # Test that calling the 'affine' property without setting the required attributes raises the appropriate AssertionError.
    def test_affine_property_without_attributes(self):
        poi = POI()
        with self.assertRaises(AssertionError):
            _ = poi.affine

    # Test that creating an instance of the 'POI' class with None values for all attributes initializes the attributes correctly.
    def test_create_instance_with_none_values(self):
        poi = POI()

        assert poi.orientation == ("R", "A", "S")
        assert poi.zoom == (1, 1, 1)
        assert poi.shape is None
        assert poi.format is None
        assert poi.info == {}
        assert poi.rotation is None
        assert poi.origin is None
        assert not poi.is_global

    # Test that the 'origin' attribute is properly set to None when assigned the value of None.
    def test_origin_attribute_set_to_none(self):
        poi = POI()
        poi.origin = (1, 2, 3)
        assert poi.origin is not None
        poi.origin = None  # type: ignore
        assert poi.origin is None

    # Test that setting the 'zoom' attribute to None correctly updates the internal '_zoom' attribute to None.
    def test_set_zoom_to_none(self):
        poi = POI()
        poi.zoom = (1, 1, 1)
        assert poi._zoom == (1, 1, 1)
        poi.zoom = None
        assert poi._zoom is None

    # Test that the 'rotation' attribute is properly set to None when assigned the value of None.
    def test_rotation_attribute_set_to_none(self):
        poi = POI()
        poi.rotation = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
        assert poi.rotation is not None
        poi.rotation = None
        assert poi.rotation is None

    # Test that the 'clone' method creates a new instance of the 'POI' class with the same attributes as the original instance.
    def test_clone_without_arguments(self):
        # Create an instance of the POI class
        poi = POI()

        # Set some attributes of the instance
        poi.orientation = ("A", "P", "S")
        poi.zoom = (1.0, 1.0, 1.0)
        poi.shape = (100, 100, 100)
        poi.rotation = np.eye(3)
        poi.origin = (0, 0, 0)

        # Clone the instance without any arguments
        cloned_poi = poi.clone()

        # Check that the cloned instance has the same attributes as the original instance
        assert cloned_poi.orientation == poi.orientation
        assert cloned_poi.zoom == poi.zoom
        assert cloned_poi.shape == poi.shape
        assert cloned_poi.rotation is not None
        assert np.array_equal(cloned_poi.rotation, poi.rotation)
        assert cloned_poi.origin == poi.origin

    # Test that calling the 'local_to_global' method without setting the required attributes raises the appropriate AssertionError.
    def test_local_to_global_without_attributes(self):
        poi = POI()
        with self.assertRaises(AssertionError):
            poi.local_to_global((1, 2, 3))

    # Test that calling the 'global_to_local' method without setting the required attributes raises an AssertionError.
    def test_global_to_local_without_attributes(self):
        poi = POI()
        with self.assertRaises(AssertionError):
            poi.global_to_local((1, 2, 3))

    # Test that the 'shift_all_centroid_coordinates' method does not modify the POI object when called with None as the translation vector.
    def test_shift_all_centroid_coordinates_with_none_translation_vector(self):
        # Create a POI object
        poi = POI()

        # Call the shift_all_centroid_coordinates method with None as the translation vector
        result = poi.shift_all_coordinates(None)

        # Check that the POI object is not modified
        assert result == poi

    # Test that the 'rescale' method raises an AssertionError when called with None as the voxel_spacing.
    def test_rescale_with_none_voxel_spacing(self):
        poi = POI()
        with self.assertRaises(TypeError):
            poi.rescale(voxel_spacing=None)  # type: ignore

    # Test that calling the 'map_labels' method with an invalid label_map raises a ValueError.
    def test_invalid_label_map(self):
        poi = POI()
        label_map = {1: 2, 3: 4}
        with self.assertRaises(ValueError):
            poi.map_labels(label_map)  # type: ignore

    # Test that removing a centroid that doesn't exist using the 'remove_centroid' method does not raise an error and does not modify the centroids.
    def test_remove_nonexistent_centroid(self):
        # Create a POI object with some centroids
        poi = POI()
        poi.centroids = {(12, 13): (1.0, 2.0, 3.0), (19, 23): (4.0, 5.0, 6.0)}

        # Remove a centroid that doesn't exist
        poi.remove_((50, 50))

        # Check that the centroids are not modified
        assert poi.centroids == {(12, 13): (1.0, 2.0, 3.0), (19, 23): (4.0, 5.0, 6.0)}

    # Test that the 'filter_points_inside_shape' method correctly filters out centroids that are outside the shape when the shape attribute is None.
    def test_filter_points_inside_shape_with_none_shape(self):
        # Create a POI object with centroids outside the shape and shape attribute set to None
        poi = POI()
        poi.centroids = {(1, 1): (10, 10, 10), (2, 2): (20, 20, 20), (3, 3): (30, 30, 30)}
        poi.shape = None  # type: ignore
        with self.assertRaises(ValueError):
            # Call the 'filter_points_inside_shape' method
            _ = poi.filter_points_inside_shape()

    # Test that the 'round' method of the 'POI' class correctly rounds the coordinates
    def test_round_ndigits(self):
        # Create a POI object with centroids
        centroids = {
            (1, 1): (1.23456789, 2.3456789, 3.456789),
            (2, 2): (4.56789012, 5.67890123, 6.78901234),
            (3, 3): (7.89012345, 8.90123456, 9.01234567),
        }
        poi = POI(centroids=centroids)

        # Round the coordinates with a value for ndigits
        poi_rounded = poi.round(2)

        # Check that the coordinates are correctly rounded
        assert poi_rounded[(1, 1)] == (1.23, 2.35, 3.46)
        assert poi_rounded[(2, 2)] == (4.57, 5.68, 6.79)
        assert poi_rounded[(3, 3)] == (7.89, 8.90, 9.01)

    # Test that the 'is_global' property returns the correct value for an instance of the 'POI' class.
    def test_is_global_property(self):
        poi = POI()
        assert not poi.is_global

    # Test that iterating over a 'POI' instance using a for loop correctly iterates over the centroids.
    def test_iterating_over_poi_instance(self):
        # Create a 'POI' instance with some centroids
        poi = POI()
        poi.centroids = {(1, 10): (1.0, 2.0, 3.0), (2, 20): (4.0, 5.0, 6.0), (3, 30): (7.0, 8.0, 9.0)}

        # Iterate over the 'POI' instance using a for loop
        result = list(poi.keys())
        # Check that the centroids were correctly iterated over
        assert result == [(1, 10), (2, 20), (3, 30)]

    # Test that the 'calculate_distances' method returns the correct distances between the centroids and the target point.
    def test_calculate_distances_with_valid_target_point(self):
        # Create a POI object with some centroids
        poi = POI()
        poi.centroids = {(1, 1): (0, 0, 0), (2, 1): (1, 1, 1), (3, 2): (2, 2, 2)}

        # Set a target point
        target_point = (1, 1, 1)

        # Calculate the distances
        distances = poi.calculate_distances_cord(target_point)

        # Check that the distances are correct
        assert distances == {(1, 1): 1.7320508075688772, (2, 1): 0.0, (3, 2): 1.7320508075688772}

    # Test that the 'to_global' method converts the instance of POI to a global POI.
    def test_to_global_method(self):
        # Create a POI instance
        # Add some centroids to the POI instance
        centroids = {(1, 1): (10.0, 20.0, 30.0), (2, 1): (15.0, 25.0, 35.0), (1, 2): (12.0, 22.0, 32.0)}

        poi = POI(centroids=centroids, zoom=(1, 2, 3), rotation=np.eye(3), origin=(10, 20, 30))

        # Convert the POI instance to a global POI
        global_poi = poi.to_global()

        # Check that the converted instance is of type POI_Global
        assert isinstance(global_poi, POI_Global)

        # Check that the centroids in the global POI are the same as in the original POI
        other_poi = global_poi.to_other_poi(poi)
        # Check that the other attributes of the global POI are the same as in the original POI
        assert other_poi.centroids == poi.centroids
        assert other_poi.orientation == poi.orientation
        assert other_poi.zoom == poi.zoom
        assert other_poi.shape == poi.shape
        assert other_poi.format == poi.format
        assert other_poi.info == poi.info
        assert (other_poi.rotation == poi.rotation).all()
        assert other_poi.origin == poi.origin
        assert other_poi._zoom == poi._zoom

    # Test that the 'to_global' method converts the instance of POI to a global POI.
    def test_to_global_method2(self):
        # Create a POI instance
        # Add some centroids to the POI instance
        centroids = {(1, 1): (10.0, 20.0, 30.0), (2, 1): (15.0, 25.0, 35.0), (1, 2): (12.0, 22.0, 32.0)}

        poi = POI(centroids=centroids, zoom=(1, 1, 1), rotation=np.eye(3), origin=(0, 0, 0))

        # Convert the POI instance to a global POI
        global_poi = poi.to_global()

        # Check that the converted instance is of type POI_Global
        assert isinstance(global_poi, POI_Global)

        # Check that the centroids in the global POI are the same as in the original POI
        assert global_poi.centroids == poi.centroids

        other_poi = global_poi.to_other_poi(poi)
        # Check that the other attributes of the global POI are the same as in the original POI
        assert other_poi.centroids == poi.centroids
        assert other_poi.orientation == poi.orientation
        assert other_poi.zoom == poi.zoom
        assert other_poi.shape == poi.shape
        assert other_poi.format == poi.format
        assert other_poi.info == poi.info
        assert (other_poi.rotation == poi.rotation).all()
        assert other_poi.origin == poi.origin
        assert other_poi._zoom == poi._zoom

    # Test that the attributes of the 'POI' instance can be accessed using the dot notation.
    def test_attribute_access(self):
        poi = POI()
        poi.orientation = ("L", "P", "I")
        poi.zoom = (1.5, 1.5, 1.5)
        poi.shape = (256, 256, 100)
        poi.format = 2
        poi.info = {"key": "value"}
        poi.rotation = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
        poi.origin = (10, 10, 10)

        assert poi.orientation == ("L", "P", "I")
        assert poi.zoom == (1.5, 1.5, 1.5)
        assert poi.shape == (256, 256, 100)
        assert poi.format == 2
        assert poi.info == {"key": "value"}
        assert np.array_equal(poi.rotation, np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]))
        assert poi.origin == (10, 10, 10)
